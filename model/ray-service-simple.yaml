# RayService simplificado para testing básico con FLUX.1-dev
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: flux-1-dev-simple
spec:
  serveConfigV2: |
    applications:
      - name: flux-simple
        import_path: flux_simple:app
        runtime_env:
          pip: [
            "diffusers>=0.30.0", 
            "torch>=2.0.0", 
            "transformers>=4.40.0", 
            "accelerate", 
            "fastapi", 
            "pillow"
          ]
          env_vars:
            HUGGINGFACE_HUB_TOKEN: "${HUGGINGFACE_HUB_TOKEN}"
          working_dir: |
            import tempfile
            import os
            
            # Crear directorio temporal con código
            temp_dir = tempfile.mkdtemp()
            
            # Escribir el código del servidor
            server_code = '''
from fastapi import FastAPI
from ray import serve
import torch
from diffusers import FluxPipeline
from PIL import Image
from io import BytesIO
from fastapi.responses import Response
import os

app = FastAPI()

@serve.deployment(num_replicas=1, ray_actor_options={"num_gpus": 1})
@serve.ingress(app)
class FluxSimple:
    def __init__(self):
        # Usar FLUX.1-schnell para pruebas más rápidas
        model_id = "black-forest-labs/FLUX.1-schnell"
        self.pipe = FluxPipeline.from_pretrained(
            model_id,
            torch_dtype=torch.bfloat16,
            token=os.getenv("HUGGINGFACE_HUB_TOKEN")
        ).to("cuda")
        
    @app.post("/generate")
    async def generate(self, prompt: str = "a beautiful landscape"):
        image = self.pipe(
            prompt=prompt,
            num_inference_steps=4,  # schnell necesita pocos pasos
            height=512,
            width=512
        ).images[0]
        
        buf = BytesIO()
        image.save(buf, "PNG")
        return Response(content=buf.getvalue(), media_type="image/png")
        
    @app.get("/health")
    async def health(self):
        return {"status": "ok"}

flux_app = FluxSimple.bind()
            '''
            
            with open(os.path.join(temp_dir, "flux_simple.py"), "w") as f:
                f.write(server_code)
                
            return temp_dir
  rayClusterConfig:
    rayVersion: '2.37.0'
    headGroupSpec:
      rayStartParams:
        dashboard-host: '0.0.0.0'
      template:
        spec:
          containers:
          - name: ray-head
            image: rayproject/ray:2.37.0
            ports:
            - containerPort: 6379
              name: gcs
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            resources:
              limits:
                cpu: "2"
                ephemeral-storage: "15Gi"
                memory: "8Gi"
              requests:
                cpu: "2"
                ephemeral-storage: "15Gi"
                memory: "8Gi"
            env:
              - name: HUGGINGFACE_HUB_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: hf-secret
                    key: hf_api_token
          nodeSelector:
            cloud.google.com/machine-family: e2
    workerGroupSpecs:
    - replicas: 1
      minReplicas: 1
      maxReplicas: 2
      groupName: gpu-group
      rayStartParams: {}
      template:
        spec:
          containers:
          - name: ray-worker
            image: rayproject/ray:2.37.0-gpu
            resources:
              limits:
                cpu: 4
                memory: "16Gi"
                nvidia.com/gpu: 1
              requests:
                cpu: 3
                memory: "16Gi"
                nvidia.com/gpu: 1
            env:
            - name: NVIDIA_VISIBLE_DEVICES
              value: "all"
            - name: NVIDIA_DRIVER_CAPABILITIES
              value: "compute,utility"
            - name: HUGGINGFACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-secret
                  key: hf_api_token
          nodeSelector:
            accelerator: nvidia-h100
          tolerations:
          - key: nvidia.com/gpu
            operator: Exists
            effect: NoSchedule
